# source: http://localhost:4466
# timestamp: Wed Nov 21 2018 01:28:01 GMT-0500 (EST)

type Admin implements Node {
  id: ID!
  username: String!
  password: String!
}

"""A connection to a list of items."""
type AdminConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  username: String!
  password: String!
}

"""An edge in a connection."""
type AdminEdge {
  """The item at the end of the edge."""
  node: Admin!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AdminPreviousValues {
  id: ID!
  username: String!
  password: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
}

input AdminUpdateInput {
  username: String
  password: String
}

input AdminWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminWhereInput!]

  """Logical OR on all given filters."""
  OR: [AdminWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AdminWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input AdminWhereUniqueInput {
  id: ID
}

type AggregateAdmin {
  count: Int!
}

type AggregateArticle {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregatePresenter {
  count: Int!
}

type AggregateProgram {
  count: Int!
}

type AggregateScheduale {
  count: Int!
}

type AggregateSetting {
  count: Int!
}

type Article implements Node {
  id: ID!
  name: String!
  auther: String!
  caption: String!
  article: String!
  images: [String!]!
  videos: String
}

"""A connection to a list of items."""
type ArticleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ArticleEdge]!
  aggregate: AggregateArticle!
}

input ArticleCreateimagesInput {
  set: [String!]
}

input ArticleCreateInput {
  name: String!
  auther: String!
  caption: String!
  article: String!
  videos: String
  images: ArticleCreateimagesInput
}

"""An edge in a connection."""
type ArticleEdge {
  """The item at the end of the edge."""
  node: Article!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ArticleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  auther_ASC
  auther_DESC
  caption_ASC
  caption_DESC
  article_ASC
  article_DESC
  videos_ASC
  videos_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ArticlePreviousValues {
  id: ID!
  name: String!
  auther: String!
  caption: String!
  article: String!
  images: [String!]!
  videos: String
}

type ArticleSubscriptionPayload {
  mutation: MutationType!
  node: Article
  updatedFields: [String!]
  previousValues: ArticlePreviousValues
}

input ArticleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ArticleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ArticleWhereInput
}

input ArticleUpdateimagesInput {
  set: [String!]
}

input ArticleUpdateInput {
  name: String
  auther: String
  caption: String
  article: String
  videos: String
  images: ArticleUpdateimagesInput
}

input ArticleWhereInput {
  """Logical AND on all given filters."""
  AND: [ArticleWhereInput!]

  """Logical OR on all given filters."""
  OR: [ArticleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ArticleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  auther: String

  """All values that are not equal to given value."""
  auther_not: String

  """All values that are contained in given list."""
  auther_in: [String!]

  """All values that are not contained in given list."""
  auther_not_in: [String!]

  """All values less than the given value."""
  auther_lt: String

  """All values less than or equal the given value."""
  auther_lte: String

  """All values greater than the given value."""
  auther_gt: String

  """All values greater than or equal the given value."""
  auther_gte: String

  """All values containing the given string."""
  auther_contains: String

  """All values not containing the given string."""
  auther_not_contains: String

  """All values starting with the given string."""
  auther_starts_with: String

  """All values not starting with the given string."""
  auther_not_starts_with: String

  """All values ending with the given string."""
  auther_ends_with: String

  """All values not ending with the given string."""
  auther_not_ends_with: String
  caption: String

  """All values that are not equal to given value."""
  caption_not: String

  """All values that are contained in given list."""
  caption_in: [String!]

  """All values that are not contained in given list."""
  caption_not_in: [String!]

  """All values less than the given value."""
  caption_lt: String

  """All values less than or equal the given value."""
  caption_lte: String

  """All values greater than the given value."""
  caption_gt: String

  """All values greater than or equal the given value."""
  caption_gte: String

  """All values containing the given string."""
  caption_contains: String

  """All values not containing the given string."""
  caption_not_contains: String

  """All values starting with the given string."""
  caption_starts_with: String

  """All values not starting with the given string."""
  caption_not_starts_with: String

  """All values ending with the given string."""
  caption_ends_with: String

  """All values not ending with the given string."""
  caption_not_ends_with: String
  article: String

  """All values that are not equal to given value."""
  article_not: String

  """All values that are contained in given list."""
  article_in: [String!]

  """All values that are not contained in given list."""
  article_not_in: [String!]

  """All values less than the given value."""
  article_lt: String

  """All values less than or equal the given value."""
  article_lte: String

  """All values greater than the given value."""
  article_gt: String

  """All values greater than or equal the given value."""
  article_gte: String

  """All values containing the given string."""
  article_contains: String

  """All values not containing the given string."""
  article_not_contains: String

  """All values starting with the given string."""
  article_starts_with: String

  """All values not starting with the given string."""
  article_not_starts_with: String

  """All values ending with the given string."""
  article_ends_with: String

  """All values not ending with the given string."""
  article_not_ends_with: String
  videos: String

  """All values that are not equal to given value."""
  videos_not: String

  """All values that are contained in given list."""
  videos_in: [String!]

  """All values that are not contained in given list."""
  videos_not_in: [String!]

  """All values less than the given value."""
  videos_lt: String

  """All values less than or equal the given value."""
  videos_lte: String

  """All values greater than the given value."""
  videos_gt: String

  """All values greater than or equal the given value."""
  videos_gte: String

  """All values containing the given string."""
  videos_contains: String

  """All values not containing the given string."""
  videos_not_contains: String

  """All values starting with the given string."""
  videos_starts_with: String

  """All values not starting with the given string."""
  videos_not_starts_with: String

  """All values ending with the given string."""
  videos_ends_with: String

  """All values not ending with the given string."""
  videos_not_ends_with: String
}

input ArticleWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Event implements Node {
  id: ID!
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  duration_ASC
  duration_DESC
  banner_ASC
  banner_DESC
  icon_ASC
  icon_DESC
  isShowen_ASC
  isShowen_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  name: String
  duration: Int
  banner: String
  icon: String
  isShowen: Boolean
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  banner: String

  """All values that are not equal to given value."""
  banner_not: String

  """All values that are contained in given list."""
  banner_in: [String!]

  """All values that are not contained in given list."""
  banner_not_in: [String!]

  """All values less than the given value."""
  banner_lt: String

  """All values less than or equal the given value."""
  banner_lte: String

  """All values greater than the given value."""
  banner_gt: String

  """All values greater than or equal the given value."""
  banner_gte: String

  """All values containing the given string."""
  banner_contains: String

  """All values not containing the given string."""
  banner_not_contains: String

  """All values starting with the given string."""
  banner_starts_with: String

  """All values not starting with the given string."""
  banner_not_starts_with: String

  """All values ending with the given string."""
  banner_ends_with: String

  """All values not ending with the given string."""
  banner_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  isShowen: Boolean

  """All values that are not equal to given value."""
  isShowen_not: Boolean
}

input EventWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  createPresenter(data: PresenterCreateInput!): Presenter!
  createArticle(data: ArticleCreateInput!): Article!
  createSetting(data: SettingCreateInput!): Setting!
  createEvent(data: EventCreateInput!): Event!
  createScheduale(data: SchedualeCreateInput!): Scheduale!
  createProgram(data: ProgramCreateInput!): Program!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updatePresenter(data: PresenterUpdateInput!, where: PresenterWhereUniqueInput!): Presenter
  updateArticle(data: ArticleUpdateInput!, where: ArticleWhereUniqueInput!): Article
  updateSetting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateScheduale(data: SchedualeUpdateInput!, where: SchedualeWhereUniqueInput!): Scheduale
  updateProgram(data: ProgramUpdateInput!, where: ProgramWhereUniqueInput!): Program
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deletePresenter(where: PresenterWhereUniqueInput!): Presenter
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteScheduale(where: SchedualeWhereUniqueInput!): Scheduale
  deleteProgram(where: ProgramWhereUniqueInput!): Program
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  upsertPresenter(where: PresenterWhereUniqueInput!, create: PresenterCreateInput!, update: PresenterUpdateInput!): Presenter!
  upsertArticle(where: ArticleWhereUniqueInput!, create: ArticleCreateInput!, update: ArticleUpdateInput!): Article!
  upsertSetting(where: SettingWhereUniqueInput!, create: SettingCreateInput!, update: SettingUpdateInput!): Setting!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertScheduale(where: SchedualeWhereUniqueInput!, create: SchedualeCreateInput!, update: SchedualeUpdateInput!): Scheduale!
  upsertProgram(where: ProgramWhereUniqueInput!, create: ProgramCreateInput!, update: ProgramUpdateInput!): Program!
  updateManyAdmins(data: AdminUpdateInput!, where: AdminWhereInput): BatchPayload!
  updateManyPresenters(data: PresenterUpdateInput!, where: PresenterWhereInput): BatchPayload!
  updateManyArticles(data: ArticleUpdateInput!, where: ArticleWhereInput): BatchPayload!
  updateManySettings(data: SettingUpdateInput!, where: SettingWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyScheduales(data: SchedualeUpdateInput!, where: SchedualeWhereInput): BatchPayload!
  updateManyPrograms(data: ProgramUpdateInput!, where: ProgramWhereInput): BatchPayload!
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  deleteManyPresenters(where: PresenterWhereInput): BatchPayload!
  deleteManyArticles(where: ArticleWhereInput): BatchPayload!
  deleteManySettings(where: SettingWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyScheduales(where: SchedualeWhereInput): BatchPayload!
  deleteManyPrograms(where: ProgramWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Presenter implements Node {
  id: ID!
  name: String!
  position: String!
  program(where: ProgramWhereInput): Program
  image: String!
}

"""A connection to a list of items."""
type PresenterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PresenterEdge]!
  aggregate: AggregatePresenter!
}

input PresenterCreateInput {
  name: String!
  position: String!
  image: String!
  program: ProgramCreateOneWithoutPresenterInput
}

input PresenterCreateOneWithoutProgramInput {
  create: PresenterCreateWithoutProgramInput
  connect: PresenterWhereUniqueInput
}

input PresenterCreateWithoutProgramInput {
  name: String!
  position: String!
  image: String!
}

"""An edge in a connection."""
type PresenterEdge {
  """The item at the end of the edge."""
  node: Presenter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PresenterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  position_ASC
  position_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PresenterPreviousValues {
  id: ID!
  name: String!
  position: String!
  image: String!
}

type PresenterSubscriptionPayload {
  mutation: MutationType!
  node: Presenter
  updatedFields: [String!]
  previousValues: PresenterPreviousValues
}

input PresenterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PresenterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PresenterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PresenterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PresenterWhereInput
}

input PresenterUpdateInput {
  name: String
  position: String
  image: String
  program: ProgramUpdateOneWithoutPresenterInput
}

input PresenterUpdateOneWithoutProgramInput {
  create: PresenterCreateWithoutProgramInput
  connect: PresenterWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PresenterUpdateWithoutProgramDataInput
  upsert: PresenterUpsertWithoutProgramInput
}

input PresenterUpdateWithoutProgramDataInput {
  name: String
  position: String
  image: String
}

input PresenterUpsertWithoutProgramInput {
  update: PresenterUpdateWithoutProgramDataInput!
  create: PresenterCreateWithoutProgramInput!
}

input PresenterWhereInput {
  """Logical AND on all given filters."""
  AND: [PresenterWhereInput!]

  """Logical OR on all given filters."""
  OR: [PresenterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PresenterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  position: String

  """All values that are not equal to given value."""
  position_not: String

  """All values that are contained in given list."""
  position_in: [String!]

  """All values that are not contained in given list."""
  position_not_in: [String!]

  """All values less than the given value."""
  position_lt: String

  """All values less than or equal the given value."""
  position_lte: String

  """All values greater than the given value."""
  position_gt: String

  """All values greater than or equal the given value."""
  position_gte: String

  """All values containing the given string."""
  position_contains: String

  """All values not containing the given string."""
  position_not_contains: String

  """All values starting with the given string."""
  position_starts_with: String

  """All values not starting with the given string."""
  position_not_starts_with: String

  """All values ending with the given string."""
  position_ends_with: String

  """All values not ending with the given string."""
  position_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  program: ProgramWhereInput
}

input PresenterWhereUniqueInput {
  id: ID
}

type Program implements Node {
  id: ID!
  name: String!
  presenter(where: PresenterWhereInput): Presenter
  programDate: DateTime
  description: String!
  duration: Int
  webBanner: String!
  mobBanner: String!
  icon: String
  playlistUrl: String!
  isShowen: Boolean
}

"""A connection to a list of items."""
type ProgramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProgramEdge]!
  aggregate: AggregateProgram!
}

input ProgramCreateInput {
  name: String!
  programDate: DateTime
  description: String!
  duration: Int
  webBanner: String!
  mobBanner: String!
  icon: String
  playlistUrl: String!
  isShowen: Boolean
  presenter: PresenterCreateOneWithoutProgramInput
}

input ProgramCreateManyInput {
  create: [ProgramCreateInput!]
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateOneWithoutPresenterInput {
  create: ProgramCreateWithoutPresenterInput
  connect: ProgramWhereUniqueInput
}

input ProgramCreateWithoutPresenterInput {
  name: String!
  programDate: DateTime
  description: String!
  duration: Int
  webBanner: String!
  mobBanner: String!
  icon: String
  playlistUrl: String!
  isShowen: Boolean
}

"""An edge in a connection."""
type ProgramEdge {
  """The item at the end of the edge."""
  node: Program!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProgramOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  programDate_ASC
  programDate_DESC
  description_ASC
  description_DESC
  duration_ASC
  duration_DESC
  webBanner_ASC
  webBanner_DESC
  mobBanner_ASC
  mobBanner_DESC
  icon_ASC
  icon_DESC
  playlistUrl_ASC
  playlistUrl_DESC
  isShowen_ASC
  isShowen_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProgramPreviousValues {
  id: ID!
  name: String!
  programDate: DateTime
  description: String!
  duration: Int
  webBanner: String!
  mobBanner: String!
  icon: String
  playlistUrl: String!
  isShowen: Boolean
}

type ProgramSubscriptionPayload {
  mutation: MutationType!
  node: Program
  updatedFields: [String!]
  previousValues: ProgramPreviousValues
}

input ProgramSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProgramWhereInput
}

input ProgramUpdateDataInput {
  name: String
  programDate: DateTime
  description: String
  duration: Int
  webBanner: String
  mobBanner: String
  icon: String
  playlistUrl: String
  isShowen: Boolean
  presenter: PresenterUpdateOneWithoutProgramInput
}

input ProgramUpdateInput {
  name: String
  programDate: DateTime
  description: String
  duration: Int
  webBanner: String
  mobBanner: String
  icon: String
  playlistUrl: String
  isShowen: Boolean
  presenter: PresenterUpdateOneWithoutProgramInput
}

input ProgramUpdateManyInput {
  create: [ProgramCreateInput!]
  connect: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueNestedInput!]
  upsert: [ProgramUpsertWithWhereUniqueNestedInput!]
}

input ProgramUpdateOneWithoutPresenterInput {
  create: ProgramCreateWithoutPresenterInput
  connect: ProgramWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProgramUpdateWithoutPresenterDataInput
  upsert: ProgramUpsertWithoutPresenterInput
}

input ProgramUpdateWithoutPresenterDataInput {
  name: String
  programDate: DateTime
  description: String
  duration: Int
  webBanner: String
  mobBanner: String
  icon: String
  playlistUrl: String
  isShowen: Boolean
}

input ProgramUpdateWithWhereUniqueNestedInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateDataInput!
}

input ProgramUpsertWithoutPresenterInput {
  update: ProgramUpdateWithoutPresenterDataInput!
  create: ProgramCreateWithoutPresenterInput!
}

input ProgramUpsertWithWhereUniqueNestedInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateDataInput!
  create: ProgramCreateInput!
}

input ProgramWhereInput {
  """Logical AND on all given filters."""
  AND: [ProgramWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProgramWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProgramWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  programDate: DateTime

  """All values that are not equal to given value."""
  programDate_not: DateTime

  """All values that are contained in given list."""
  programDate_in: [DateTime!]

  """All values that are not contained in given list."""
  programDate_not_in: [DateTime!]

  """All values less than the given value."""
  programDate_lt: DateTime

  """All values less than or equal the given value."""
  programDate_lte: DateTime

  """All values greater than the given value."""
  programDate_gt: DateTime

  """All values greater than or equal the given value."""
  programDate_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  webBanner: String

  """All values that are not equal to given value."""
  webBanner_not: String

  """All values that are contained in given list."""
  webBanner_in: [String!]

  """All values that are not contained in given list."""
  webBanner_not_in: [String!]

  """All values less than the given value."""
  webBanner_lt: String

  """All values less than or equal the given value."""
  webBanner_lte: String

  """All values greater than the given value."""
  webBanner_gt: String

  """All values greater than or equal the given value."""
  webBanner_gte: String

  """All values containing the given string."""
  webBanner_contains: String

  """All values not containing the given string."""
  webBanner_not_contains: String

  """All values starting with the given string."""
  webBanner_starts_with: String

  """All values not starting with the given string."""
  webBanner_not_starts_with: String

  """All values ending with the given string."""
  webBanner_ends_with: String

  """All values not ending with the given string."""
  webBanner_not_ends_with: String
  mobBanner: String

  """All values that are not equal to given value."""
  mobBanner_not: String

  """All values that are contained in given list."""
  mobBanner_in: [String!]

  """All values that are not contained in given list."""
  mobBanner_not_in: [String!]

  """All values less than the given value."""
  mobBanner_lt: String

  """All values less than or equal the given value."""
  mobBanner_lte: String

  """All values greater than the given value."""
  mobBanner_gt: String

  """All values greater than or equal the given value."""
  mobBanner_gte: String

  """All values containing the given string."""
  mobBanner_contains: String

  """All values not containing the given string."""
  mobBanner_not_contains: String

  """All values starting with the given string."""
  mobBanner_starts_with: String

  """All values not starting with the given string."""
  mobBanner_not_starts_with: String

  """All values ending with the given string."""
  mobBanner_ends_with: String

  """All values not ending with the given string."""
  mobBanner_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  playlistUrl: String

  """All values that are not equal to given value."""
  playlistUrl_not: String

  """All values that are contained in given list."""
  playlistUrl_in: [String!]

  """All values that are not contained in given list."""
  playlistUrl_not_in: [String!]

  """All values less than the given value."""
  playlistUrl_lt: String

  """All values less than or equal the given value."""
  playlistUrl_lte: String

  """All values greater than the given value."""
  playlistUrl_gt: String

  """All values greater than or equal the given value."""
  playlistUrl_gte: String

  """All values containing the given string."""
  playlistUrl_contains: String

  """All values not containing the given string."""
  playlistUrl_not_contains: String

  """All values starting with the given string."""
  playlistUrl_starts_with: String

  """All values not starting with the given string."""
  playlistUrl_not_starts_with: String

  """All values ending with the given string."""
  playlistUrl_ends_with: String

  """All values not ending with the given string."""
  playlistUrl_not_ends_with: String
  isShowen: Boolean

  """All values that are not equal to given value."""
  isShowen_not: Boolean
  presenter: PresenterWhereInput
  _MagicalBackRelation_MyRelation1_every: SettingWhereInput
  _MagicalBackRelation_MyRelation1_some: SettingWhereInput
  _MagicalBackRelation_MyRelation1_none: SettingWhereInput
  _MagicalBackRelation_MyRelation3_every: SettingWhereInput
  _MagicalBackRelation_MyRelation3_some: SettingWhereInput
  _MagicalBackRelation_MyRelation3_none: SettingWhereInput
  _MagicalBackRelation_MyRelation2_every: SettingWhereInput
  _MagicalBackRelation_MyRelation2_some: SettingWhereInput
  _MagicalBackRelation_MyRelation2_none: SettingWhereInput
}

input ProgramWhereUniqueInput {
  id: ID
}

type Query {
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  presenters(where: PresenterWhereInput, orderBy: PresenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Presenter]!
  articles(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Article]!
  settings(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Setting]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  scheduales(where: SchedualeWhereInput, orderBy: SchedualeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Scheduale]!
  programs(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program]!
  admin(where: AdminWhereUniqueInput!): Admin
  presenter(where: PresenterWhereUniqueInput!): Presenter
  article(where: ArticleWhereUniqueInput!): Article
  setting(where: SettingWhereUniqueInput!): Setting
  event(where: EventWhereUniqueInput!): Event
  scheduale(where: SchedualeWhereUniqueInput!): Scheduale
  program(where: ProgramWhereUniqueInput!): Program
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  presentersConnection(where: PresenterWhereInput, orderBy: PresenterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PresenterConnection!
  articlesConnection(where: ArticleWhereInput, orderBy: ArticleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ArticleConnection!
  settingsConnection(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SettingConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  schedualesConnection(where: SchedualeWhereInput, orderBy: SchedualeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SchedualeConnection!
  programsConnection(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProgramConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Scheduale implements Node {
  id: ID!
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

"""A connection to a list of items."""
type SchedualeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SchedualeEdge]!
  aggregate: AggregateScheduale!
}

input SchedualeCreateInput {
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

"""An edge in a connection."""
type SchedualeEdge {
  """The item at the end of the edge."""
  node: Scheduale!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SchedualeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  duration_ASC
  duration_DESC
  banner_ASC
  banner_DESC
  icon_ASC
  icon_DESC
  isShowen_ASC
  isShowen_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SchedualePreviousValues {
  id: ID!
  name: String!
  duration: Int
  banner: String!
  icon: String!
  isShowen: Boolean
}

type SchedualeSubscriptionPayload {
  mutation: MutationType!
  node: Scheduale
  updatedFields: [String!]
  previousValues: SchedualePreviousValues
}

input SchedualeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SchedualeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SchedualeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SchedualeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SchedualeWhereInput
}

input SchedualeUpdateInput {
  name: String
  duration: Int
  banner: String
  icon: String
  isShowen: Boolean
}

input SchedualeWhereInput {
  """Logical AND on all given filters."""
  AND: [SchedualeWhereInput!]

  """Logical OR on all given filters."""
  OR: [SchedualeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SchedualeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  banner: String

  """All values that are not equal to given value."""
  banner_not: String

  """All values that are contained in given list."""
  banner_in: [String!]

  """All values that are not contained in given list."""
  banner_not_in: [String!]

  """All values less than the given value."""
  banner_lt: String

  """All values less than or equal the given value."""
  banner_lte: String

  """All values greater than the given value."""
  banner_gt: String

  """All values greater than or equal the given value."""
  banner_gte: String

  """All values containing the given string."""
  banner_contains: String

  """All values not containing the given string."""
  banner_not_contains: String

  """All values starting with the given string."""
  banner_starts_with: String

  """All values not starting with the given string."""
  banner_not_starts_with: String

  """All values ending with the given string."""
  banner_ends_with: String

  """All values not ending with the given string."""
  banner_not_ends_with: String
  icon: String

  """All values that are not equal to given value."""
  icon_not: String

  """All values that are contained in given list."""
  icon_in: [String!]

  """All values that are not contained in given list."""
  icon_not_in: [String!]

  """All values less than the given value."""
  icon_lt: String

  """All values less than or equal the given value."""
  icon_lte: String

  """All values greater than the given value."""
  icon_gt: String

  """All values greater than or equal the given value."""
  icon_gte: String

  """All values containing the given string."""
  icon_contains: String

  """All values not containing the given string."""
  icon_not_contains: String

  """All values starting with the given string."""
  icon_starts_with: String

  """All values not starting with the given string."""
  icon_not_starts_with: String

  """All values ending with the given string."""
  icon_ends_with: String

  """All values not ending with the given string."""
  icon_not_ends_with: String
  isShowen: Boolean

  """All values that are not equal to given value."""
  isShowen_not: Boolean
}

input SchedualeWhereUniqueInput {
  id: ID
}

type Setting implements Node {
  id: ID!
  logo: String!
  articlesIcom: String!
  programIcon: String!
  teamIcon: String!
  twitter: String!
  newsPrograms(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program!]
  specialBanners(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program!]
  specialPrograms(where: ProgramWhereInput, orderBy: ProgramOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Program!]
  liveUrl: String!
}

"""A connection to a list of items."""
type SettingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SettingEdge]!
  aggregate: AggregateSetting!
}

input SettingCreateInput {
  logo: String!
  articlesIcom: String!
  programIcon: String!
  teamIcon: String!
  twitter: String!
  liveUrl: String!
  newsPrograms: ProgramCreateManyInput
  specialBanners: ProgramCreateManyInput
  specialPrograms: ProgramCreateManyInput
}

"""An edge in a connection."""
type SettingEdge {
  """The item at the end of the edge."""
  node: Setting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SettingOrderByInput {
  id_ASC
  id_DESC
  logo_ASC
  logo_DESC
  articlesIcom_ASC
  articlesIcom_DESC
  programIcon_ASC
  programIcon_DESC
  teamIcon_ASC
  teamIcon_DESC
  twitter_ASC
  twitter_DESC
  liveUrl_ASC
  liveUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SettingPreviousValues {
  id: ID!
  logo: String!
  articlesIcom: String!
  programIcon: String!
  teamIcon: String!
  twitter: String!
  liveUrl: String!
}

type SettingSubscriptionPayload {
  mutation: MutationType!
  node: Setting
  updatedFields: [String!]
  previousValues: SettingPreviousValues
}

input SettingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SettingWhereInput
}

input SettingUpdateInput {
  logo: String
  articlesIcom: String
  programIcon: String
  teamIcon: String
  twitter: String
  liveUrl: String
  newsPrograms: ProgramUpdateManyInput
  specialBanners: ProgramUpdateManyInput
  specialPrograms: ProgramUpdateManyInput
}

input SettingWhereInput {
  """Logical AND on all given filters."""
  AND: [SettingWhereInput!]

  """Logical OR on all given filters."""
  OR: [SettingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SettingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  logo: String

  """All values that are not equal to given value."""
  logo_not: String

  """All values that are contained in given list."""
  logo_in: [String!]

  """All values that are not contained in given list."""
  logo_not_in: [String!]

  """All values less than the given value."""
  logo_lt: String

  """All values less than or equal the given value."""
  logo_lte: String

  """All values greater than the given value."""
  logo_gt: String

  """All values greater than or equal the given value."""
  logo_gte: String

  """All values containing the given string."""
  logo_contains: String

  """All values not containing the given string."""
  logo_not_contains: String

  """All values starting with the given string."""
  logo_starts_with: String

  """All values not starting with the given string."""
  logo_not_starts_with: String

  """All values ending with the given string."""
  logo_ends_with: String

  """All values not ending with the given string."""
  logo_not_ends_with: String
  articlesIcom: String

  """All values that are not equal to given value."""
  articlesIcom_not: String

  """All values that are contained in given list."""
  articlesIcom_in: [String!]

  """All values that are not contained in given list."""
  articlesIcom_not_in: [String!]

  """All values less than the given value."""
  articlesIcom_lt: String

  """All values less than or equal the given value."""
  articlesIcom_lte: String

  """All values greater than the given value."""
  articlesIcom_gt: String

  """All values greater than or equal the given value."""
  articlesIcom_gte: String

  """All values containing the given string."""
  articlesIcom_contains: String

  """All values not containing the given string."""
  articlesIcom_not_contains: String

  """All values starting with the given string."""
  articlesIcom_starts_with: String

  """All values not starting with the given string."""
  articlesIcom_not_starts_with: String

  """All values ending with the given string."""
  articlesIcom_ends_with: String

  """All values not ending with the given string."""
  articlesIcom_not_ends_with: String
  programIcon: String

  """All values that are not equal to given value."""
  programIcon_not: String

  """All values that are contained in given list."""
  programIcon_in: [String!]

  """All values that are not contained in given list."""
  programIcon_not_in: [String!]

  """All values less than the given value."""
  programIcon_lt: String

  """All values less than or equal the given value."""
  programIcon_lte: String

  """All values greater than the given value."""
  programIcon_gt: String

  """All values greater than or equal the given value."""
  programIcon_gte: String

  """All values containing the given string."""
  programIcon_contains: String

  """All values not containing the given string."""
  programIcon_not_contains: String

  """All values starting with the given string."""
  programIcon_starts_with: String

  """All values not starting with the given string."""
  programIcon_not_starts_with: String

  """All values ending with the given string."""
  programIcon_ends_with: String

  """All values not ending with the given string."""
  programIcon_not_ends_with: String
  teamIcon: String

  """All values that are not equal to given value."""
  teamIcon_not: String

  """All values that are contained in given list."""
  teamIcon_in: [String!]

  """All values that are not contained in given list."""
  teamIcon_not_in: [String!]

  """All values less than the given value."""
  teamIcon_lt: String

  """All values less than or equal the given value."""
  teamIcon_lte: String

  """All values greater than the given value."""
  teamIcon_gt: String

  """All values greater than or equal the given value."""
  teamIcon_gte: String

  """All values containing the given string."""
  teamIcon_contains: String

  """All values not containing the given string."""
  teamIcon_not_contains: String

  """All values starting with the given string."""
  teamIcon_starts_with: String

  """All values not starting with the given string."""
  teamIcon_not_starts_with: String

  """All values ending with the given string."""
  teamIcon_ends_with: String

  """All values not ending with the given string."""
  teamIcon_not_ends_with: String
  twitter: String

  """All values that are not equal to given value."""
  twitter_not: String

  """All values that are contained in given list."""
  twitter_in: [String!]

  """All values that are not contained in given list."""
  twitter_not_in: [String!]

  """All values less than the given value."""
  twitter_lt: String

  """All values less than or equal the given value."""
  twitter_lte: String

  """All values greater than the given value."""
  twitter_gt: String

  """All values greater than or equal the given value."""
  twitter_gte: String

  """All values containing the given string."""
  twitter_contains: String

  """All values not containing the given string."""
  twitter_not_contains: String

  """All values starting with the given string."""
  twitter_starts_with: String

  """All values not starting with the given string."""
  twitter_not_starts_with: String

  """All values ending with the given string."""
  twitter_ends_with: String

  """All values not ending with the given string."""
  twitter_not_ends_with: String
  liveUrl: String

  """All values that are not equal to given value."""
  liveUrl_not: String

  """All values that are contained in given list."""
  liveUrl_in: [String!]

  """All values that are not contained in given list."""
  liveUrl_not_in: [String!]

  """All values less than the given value."""
  liveUrl_lt: String

  """All values less than or equal the given value."""
  liveUrl_lte: String

  """All values greater than the given value."""
  liveUrl_gt: String

  """All values greater than or equal the given value."""
  liveUrl_gte: String

  """All values containing the given string."""
  liveUrl_contains: String

  """All values not containing the given string."""
  liveUrl_not_contains: String

  """All values starting with the given string."""
  liveUrl_starts_with: String

  """All values not starting with the given string."""
  liveUrl_not_starts_with: String

  """All values ending with the given string."""
  liveUrl_ends_with: String

  """All values not ending with the given string."""
  liveUrl_not_ends_with: String
  newsPrograms_every: ProgramWhereInput
  newsPrograms_some: ProgramWhereInput
  newsPrograms_none: ProgramWhereInput
  specialBanners_every: ProgramWhereInput
  specialBanners_some: ProgramWhereInput
  specialBanners_none: ProgramWhereInput
  specialPrograms_every: ProgramWhereInput
  specialPrograms_some: ProgramWhereInput
  specialPrograms_none: ProgramWhereInput
}

input SettingWhereUniqueInput {
  id: ID
}

type Subscription {
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  presenter(where: PresenterSubscriptionWhereInput): PresenterSubscriptionPayload
  article(where: ArticleSubscriptionWhereInput): ArticleSubscriptionPayload
  setting(where: SettingSubscriptionWhereInput): SettingSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  scheduale(where: SchedualeSubscriptionWhereInput): SchedualeSubscriptionPayload
  program(where: ProgramSubscriptionWhereInput): ProgramSubscriptionPayload
}
