# import * from "../../generated/prisma.graphql"



type Query {
  contentLevelTwoes(where: ContentLevelTwoWhereInput, orderBy: ContentLevelTwoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentLevelTwo]!
  contentLevelFours(where: ContentLevelFourWhereInput, orderBy: ContentLevelFourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentLevelFour]!
  contentLevelOnes(where: ContentLevelOneWhereInput, orderBy: ContentLevelOneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentLevelOne]!
  contentLevelThrees(where: ContentLevelThreeWhereInput, orderBy: ContentLevelThreeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContentLevelThree]!
  contentLevelTwo(where: ContentLevelTwoWhereUniqueInput!): ContentLevelTwo
  contentLevelFour(where: ContentLevelFourWhereUniqueInput!): ContentLevelFour
  contentLevelOne(where: ContentLevelOneWhereUniqueInput!): ContentLevelOne
  contentLevelThree(where: ContentLevelThreeWhereUniqueInput!): ContentLevelThree
  
}

type Mutation {
  createContentLevelOne(data: ContentLevelOneCreateInput!): ContentLevelOne!
  createContentLevelTwo(data: ContentLevelTwoCreateInput!): ContentLevelTwo!
  createContentLevelThree(data: ContentLevelThreeCreateInput!): ContentLevelThree!
  createContentLevelFour(data: ContentLevelFourCreateInput!): ContentLevelFour!
  updateContentLevelTwo(data: ContentLevelTwoUpdateInput!, where: ContentLevelTwoWhereUniqueInput!): ContentLevelTwo
  updateContentLevelFour(data: ContentLevelFourUpdateInput!, where: ContentLevelFourWhereUniqueInput!): ContentLevelFour
  updateContentLevelThree(data: ContentLevelThreeUpdateInput!, where: ContentLevelThreeWhereUniqueInput!): ContentLevelThree
  updateContentLevelOne(data: ContentLevelOneUpdateInput!, where: ContentLevelOneWhereUniqueInput!): ContentLevelOne
  deleteContentLevelTwo(where: ContentLevelTwoWhereUniqueInput!): ContentLevelTwo
  deleteContentLevelFour(where: ContentLevelFourWhereUniqueInput!): ContentLevelFour
  deleteContentLevelOne(where: ContentLevelOneWhereUniqueInput!): ContentLevelOne
  deleteContentLevelThree(where: ContentLevelThreeWhereUniqueInput!): ContentLevelThree
}